package org.apache.batik.svggen;
public class SVGGraphics2D extends org.apache.batik.ext.awt.g2d.AbstractGraphics2D implements java.lang.Cloneable, org.apache.batik.svggen.SVGSyntax, org.apache.batik.svggen.ErrorConstants {
    public static final java.lang.String DEFAULT_XML_ENCODING = "ISO-8859-1";
    public static final int DEFAULT_MAX_GC_OVERRIDES = 3;
    protected org.apache.batik.svggen.DOMTreeManager domTreeManager;
    protected org.apache.batik.svggen.DOMGroupManager domGroupManager;
    protected org.apache.batik.svggen.SVGGeneratorContext generatorCtx;
    protected org.apache.batik.svggen.SVGShape shapeConverter;
    protected java.awt.Dimension svgCanvasSize;
    protected java.awt.Graphics2D fmg;
    { java.awt.image.BufferedImage bi = new java.awt.image.BufferedImage(
        1,
        1,
        java.awt.image.BufferedImage.
          TYPE_INT_ARGB);
      fmg = bi.createGraphics(); }
    public final java.awt.Dimension getSVGCanvasSize() { return svgCanvasSize;
    }
    public final void setSVGCanvasSize(java.awt.Dimension svgCanvasSize) {
        this.
          svgCanvasSize =
          new java.awt.Dimension(
            svgCanvasSize);
    }
    public final org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext() {
        return generatorCtx;
    }
    public final org.apache.batik.svggen.SVGShape getShapeConverter() {
        return shapeConverter;
    }
    public final org.apache.batik.svggen.DOMTreeManager getDOMTreeManager() {
        return domTreeManager;
    }
    protected final void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager treeMgr) {
        this.
          domTreeManager =
          treeMgr;
        generatorCtx.
          genericImageHandler.
          setDOMTreeManager(
            domTreeManager);
    }
    protected final org.apache.batik.svggen.DOMGroupManager getDOMGroupManager() {
        return domGroupManager;
    }
    protected final void setDOMGroupManager(org.apache.batik.svggen.DOMGroupManager groupMgr) {
        this.
          domGroupManager =
          groupMgr;
    }
    public final org.w3c.dom.Document getDOMFactory() {
        return generatorCtx.
                 domFactory;
    }
    public final org.apache.batik.svggen.ImageHandler getImageHandler() {
        return generatorCtx.
                 imageHandler;
    }
    public final org.apache.batik.svggen.GenericImageHandler getGenericImageHandler() {
        return generatorCtx.
                 genericImageHandler;
    }
    public final org.apache.batik.svggen.ExtensionHandler getExtensionHandler() {
        return generatorCtx.
                 extensionHandler;
    }
    public final void setExtensionHandler(org.apache.batik.svggen.ExtensionHandler extensionHandler) {
        generatorCtx.
          setExtensionHandler(
            extensionHandler);
    }
    public SVGGraphics2D(org.w3c.dom.Document domFactory) {
        this(
          org.apache.batik.svggen.SVGGeneratorContext.
            createDefault(
              domFactory),
          false);
    }
    public SVGGraphics2D(org.w3c.dom.Document domFactory,
                         org.apache.batik.svggen.ImageHandler imageHandler,
                         org.apache.batik.svggen.ExtensionHandler extensionHandler,
                         boolean textAsShapes) {
        this(
          buildSVGGeneratorContext(
            domFactory,
            imageHandler,
            extensionHandler),
          textAsShapes);
    }
    public static org.apache.batik.svggen.SVGGeneratorContext buildSVGGeneratorContext(org.w3c.dom.Document domFactory,
                                                                                       org.apache.batik.svggen.ImageHandler imageHandler,
                                                                                       org.apache.batik.svggen.ExtensionHandler extensionHandler) {
        org.apache.batik.svggen.SVGGeneratorContext generatorCtx =
          new org.apache.batik.svggen.SVGGeneratorContext(
          domFactory);
        generatorCtx.
          setIDGenerator(
            new org.apache.batik.svggen.SVGIDGenerator(
              ));
        generatorCtx.
          setExtensionHandler(
            extensionHandler);
        generatorCtx.
          setImageHandler(
            imageHandler);
        generatorCtx.
          setStyleHandler(
            new org.apache.batik.svggen.DefaultStyleHandler(
              ));
        generatorCtx.
          setComment(
            "Generated by the Batik Graphics2D SVG Generator");
        generatorCtx.
          setErrorHandler(
            new org.apache.batik.svggen.DefaultErrorHandler(
              ));
        return generatorCtx;
    }
    public SVGGraphics2D(org.apache.batik.svggen.SVGGeneratorContext generatorCtx,
                         boolean textAsShapes) {
        super(
          textAsShapes);
        if (generatorCtx ==
              null)
            throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
              ERR_CONTEXT_NULL);
        setGeneratorContext(
          generatorCtx);
    }
    protected void setGeneratorContext(org.apache.batik.svggen.SVGGeneratorContext generatorCtx) {
        this.
          generatorCtx =
          generatorCtx;
        this.
          gc =
          new org.apache.batik.ext.awt.g2d.GraphicContext(
            new java.awt.geom.AffineTransform(
              ));
        org.apache.batik.svggen.SVGGeneratorContext.GraphicContextDefaults gcDefaults =
          generatorCtx.
          getGraphicContextDefaults(
            );
        if (gcDefaults !=
              null) {
            if (gcDefaults.
                  getPaint(
                    ) !=
                  null) {
                gc.
                  setPaint(
                    gcDefaults.
                      getPaint(
                        ));
            }
            if (gcDefaults.
                  getStroke(
                    ) !=
                  null) {
                gc.
                  setStroke(
                    gcDefaults.
                      getStroke(
                        ));
            }
            if (gcDefaults.
                  getComposite(
                    ) !=
                  null) {
                gc.
                  setComposite(
                    gcDefaults.
                      getComposite(
                        ));
            }
            if (gcDefaults.
                  getClip(
                    ) !=
                  null) {
                gc.
                  setClip(
                    gcDefaults.
                      getClip(
                        ));
            }
            if (gcDefaults.
                  getRenderingHints(
                    ) !=
                  null) {
                gc.
                  setRenderingHints(
                    gcDefaults.
                      getRenderingHints(
                        ));
            }
            if (gcDefaults.
                  getFont(
                    ) !=
                  null) {
                gc.
                  setFont(
                    gcDefaults.
                      getFont(
                        ));
            }
            if (gcDefaults.
                  getBackground(
                    ) !=
                  null) {
                gc.
                  setBackground(
                    gcDefaults.
                      getBackground(
                        ));
            }
        }
        this.
          shapeConverter =
          new org.apache.batik.svggen.SVGShape(
            generatorCtx);
        this.
          domTreeManager =
          new org.apache.batik.svggen.DOMTreeManager(
            gc,
            generatorCtx,
            DEFAULT_MAX_GC_OVERRIDES);
        this.
          domGroupManager =
          new org.apache.batik.svggen.DOMGroupManager(
            gc,
            domTreeManager);
        this.
          domTreeManager.
          addGroupManager(
            domGroupManager);
        generatorCtx.
          genericImageHandler.
          setDOMTreeManager(
            domTreeManager);
    }
    public SVGGraphics2D(org.apache.batik.svggen.SVGGraphics2D g) {
        super(
          g);
        this.
          generatorCtx =
          g.
            generatorCtx;
        this.
          gc.
          validateTransformStack(
            );
        this.
          shapeConverter =
          g.
            shapeConverter;
        this.
          domTreeManager =
          g.
            domTreeManager;
        this.
          domGroupManager =
          new org.apache.batik.svggen.DOMGroupManager(
            this.
              gc,
            this.
              domTreeManager);
        this.
          domTreeManager.
          addGroupManager(
            this.
              domGroupManager);
    }
    public void stream(java.lang.String svgFileName)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          svgFileName,
          false);
    }
    public void stream(java.lang.String svgFileName,
                       boolean useCss) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        try {
            java.io.OutputStreamWriter writer =
              new java.io.OutputStreamWriter(
              new java.io.FileOutputStream(
                svgFileName),
              DEFAULT_XML_ENCODING);
            stream(
              writer,
              useCss);
            writer.
              flush(
                );
            writer.
              close(
                );
        }
        catch (org.apache.batik.svggen.SVGGraphics2DIOException io) {
            throw io;
        }
        catch (java.io.IOException e) {
            generatorCtx.
              errorHandler.
              handleError(
                new org.apache.batik.svggen.SVGGraphics2DIOException(
                  e));
        }
    }
    public void stream(java.io.Writer writer)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          writer,
          false);
    }
    public void stream(java.io.Writer writer,
                       boolean useCss,
                       boolean escaped) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Element svgRoot =
          getRoot(
            );
        stream(
          svgRoot,
          writer,
          useCss,
          escaped);
    }
    public void stream(java.io.Writer writer,
                       boolean useCss) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Element svgRoot =
          getRoot(
            );
        stream(
          svgRoot,
          writer,
          useCss,
          false);
    }
    public void stream(org.w3c.dom.Element svgRoot,
                       java.io.Writer writer)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          svgRoot,
          writer,
          false,
          false);
    }
    public void stream(org.w3c.dom.Element svgRoot,
                       java.io.Writer writer,
                       boolean useCss,
                       boolean escaped) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Node rootParent =
          svgRoot.
          getParentNode(
            );
        org.w3c.dom.Node nextSibling =
          svgRoot.
          getNextSibling(
            );
        try {
            svgRoot.
              setAttributeNS(
                XMLNS_NAMESPACE_URI,
                XMLNS_PREFIX,
                SVG_NAMESPACE_URI);
            svgRoot.
              setAttributeNS(
                XMLNS_NAMESPACE_URI,
                XMLNS_PREFIX +
                ":" +
                XLINK_PREFIX,
                XLINK_NAMESPACE_URI);
            org.w3c.dom.DocumentFragment svgDocument =
              svgRoot.
              getOwnerDocument(
                ).
              createDocumentFragment(
                );
            svgDocument.
              appendChild(
                svgRoot);
            if (useCss)
                org.apache.batik.svggen.SVGCSSStyler.
                  style(
                    svgDocument);
            org.apache.batik.svggen.XmlWriter.
              writeXml(
                svgDocument,
                writer,
                escaped);
            writer.
              flush(
                );
        }
        catch (org.apache.batik.svggen.SVGGraphics2DIOException e) {
            generatorCtx.
              errorHandler.
              handleError(
                e);
        }
        catch (java.io.IOException io) {
            generatorCtx.
              errorHandler.
              handleError(
                new org.apache.batik.svggen.SVGGraphics2DIOException(
                  io));
        }
        finally {
            if (rootParent !=
                  null) {
                if (nextSibling ==
                      null) {
                    rootParent.
                      appendChild(
                        svgRoot);
                }
                else {
                    rootParent.
                      insertBefore(
                        svgRoot,
                        nextSibling);
                }
            }
        }
    }
    public java.util.List getDefinitionSet() {
        return domTreeManager.
          getDefinitionSet(
            );
    }
    public org.w3c.dom.Element getTopLevelGroup() {
        return getTopLevelGroup(
                 true);
    }
    public org.w3c.dom.Element getTopLevelGroup(boolean includeDefinitionSet) {
        return domTreeManager.
          getTopLevelGroup(
            includeDefinitionSet);
    }
    public void setTopLevelGroup(org.w3c.dom.Element topLevelGroup) {
        domTreeManager.
          setTopLevelGroup(
            topLevelGroup);
    }
    public org.w3c.dom.Element getRoot() {
        return getRoot(
                 null);
    }
    public org.w3c.dom.Element getRoot(org.w3c.dom.Element svgRoot) {
        svgRoot =
          domTreeManager.
            getRoot(
              svgRoot);
        if (svgCanvasSize !=
              null) {
            svgRoot.
              setAttributeNS(
                null,
                SVG_WIDTH_ATTRIBUTE,
                java.lang.String.
                  valueOf(
                    svgCanvasSize.
                      width));
            svgRoot.
              setAttributeNS(
                null,
                SVG_HEIGHT_ATTRIBUTE,
                java.lang.String.
                  valueOf(
                    svgCanvasSize.
                      height));
        }
        return svgRoot;
    }
    public java.awt.Graphics create() { return new org.apache.batik.svggen.SVGGraphics2D(
                                          this);
    }
    public void setXORMode(java.awt.Color c1) {
        generatorCtx.
          errorHandler.
          handleError(
            new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
              ERR_XOR));
    }
    public java.awt.FontMetrics getFontMetrics(java.awt.Font f) {
        return fmg.
          getFontMetrics(
            f);
    }
    public void copyArea(int x, int y, int width,
                         int height,
                         int dx,
                         int dy) {  }
    public boolean drawImage(java.awt.Image img,
                             int x,
                             int y,
                             java.awt.image.ImageObserver observer) {
        org.w3c.dom.Element imageElement =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            imageElement,
            x,
            y,
            img.
              getWidth(
                null),
            img.
              getHeight(
                null),
            getGeneratorContext(
              ));
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                imageElement);
        }
        else {
            java.awt.geom.AffineTransform inverseTransform =
              null;
            try {
                inverseTransform =
                  xform.
                    createInverse(
                      );
            }
            catch (java.awt.geom.NoninvertibleTransformException e) {
                throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                  ERR_UNEXPECTED);
            }
            gc.
              transform(
                xform);
            domGroupManager.
              addElement(
                imageElement);
            gc.
              transform(
                inverseTransform);
        }
        return true;
    }
    public boolean drawImage(java.awt.Image img,
                             int x,
                             int y,
                             int width,
                             int height,
                             java.awt.image.ImageObserver observer) {
        org.w3c.dom.Element imageElement =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            imageElement,
            x,
            y,
            width,
            height,
            getGeneratorContext(
              ));
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                imageElement);
        }
        else {
            java.awt.geom.AffineTransform inverseTransform =
              null;
            try {
                inverseTransform =
                  xform.
                    createInverse(
                      );
            }
            catch (java.awt.geom.NoninvertibleTransformException e) {
                throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                  ERR_UNEXPECTED);
            }
            gc.
              transform(
                xform);
            domGroupManager.
              addElement(
                imageElement);
            gc.
              transform(
                inverseTransform);
        }
        return true;
    }
    public void dispose() { this.domTreeManager.
                              removeGroupManager(
                                this.
                                  domGroupManager);
    }
    public void draw(java.awt.Shape s) { java.awt.Stroke stroke =
                                           gc.
                                           getStroke(
                                             );
                                         if (stroke instanceof java.awt.BasicStroke) {
                                             org.w3c.dom.Element svgShape =
                                               shapeConverter.
                                               toSVG(
                                                 s);
                                             if (svgShape !=
                                                   null) {
                                                 domGroupManager.
                                                   addElement(
                                                     svgShape,
                                                     org.apache.batik.svggen.DOMGroupManager.
                                                       DRAW);
                                             }
                                         }
                                         else {
                                             java.awt.Shape strokedShape =
                                               stroke.
                                               createStrokedShape(
                                                 s);
                                             fill(
                                               strokedShape);
                                         }
    }
    public boolean drawImage(java.awt.Image img,
                             java.awt.geom.AffineTransform xform,
                             java.awt.image.ImageObserver obs) {
        boolean retVal =
          true;
        if (xform ==
              null) {
            retVal =
              drawImage(
                img,
                0,
                0,
                null);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                retVal =
                  drawImage(
                    img,
                    0,
                    0,
                    null);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                retVal =
                  drawImage(
                    img,
                    0,
                    0,
                    null);
                gc.
                  setTransform(
                    savTransform);
            }
        return retVal;
    }
    public void drawImage(java.awt.image.BufferedImage img,
                          java.awt.image.BufferedImageOp op,
                          int x,
                          int y) { img = op.
                                           filter(
                                             img,
                                             null);
                                   drawImage(
                                     img,
                                     x,
                                     y,
                                     null);
    }
    public void drawRenderedImage(java.awt.image.RenderedImage img,
                                  java.awt.geom.AffineTransform trans2) {
        org.w3c.dom.Element image =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform trans1 =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            image,
            img.
              getMinX(
                ),
            img.
              getMinY(
                ),
            img.
              getWidth(
                ),
            img.
              getHeight(
                ),
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform;
        if (trans2 ==
              null) {
            xform =
              trans1;
        }
        else {
            if (trans1 ==
                  null) {
                xform =
                  trans2;
            }
            else {
                xform =
                  new java.awt.geom.AffineTransform(
                    trans2);
                xform.
                  concatenate(
                    trans1);
            }
        }
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                image);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  setTransform(
                    savTransform);
            }
    }
    public void drawRenderableImage(java.awt.image.renderable.RenderableImage img,
                                    java.awt.geom.AffineTransform trans2) {
        org.w3c.dom.Element image =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform trans1 =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            image,
            img.
              getMinX(
                ),
            img.
              getMinY(
                ),
            img.
              getWidth(
                ),
            img.
              getHeight(
                ),
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform;
        if (trans2 ==
              null) {
            xform =
              trans1;
        }
        else {
            if (trans1 ==
                  null) {
                xform =
                  trans2;
            }
            else {
                xform =
                  new java.awt.geom.AffineTransform(
                    trans2);
                xform.
                  concatenate(
                    trans1);
            }
        }
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                image);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  setTransform(
                    savTransform);
            }
    }
    public void drawString(java.lang.String s,
                           float x,
                           float y) { if (textAsShapes) {
                                          java.awt.font.GlyphVector gv =
                                            getFont(
                                              ).
                                            createGlyphVector(
                                              getFontRenderContext(
                                                ),
                                              s);
                                          drawGlyphVector(
                                            gv,
                                            x,
                                            y);
                                          return;
                                      }
                                      if (generatorCtx.
                                            svgFont) {
                                          domTreeManager.
                                            gcConverter.
                                            getFontConverter(
                                              ).
                                            recordFontUsage(
                                              s,
                                              getFont(
                                                ));
                                      }
                                      java.awt.geom.AffineTransform savTxf =
                                        getTransform(
                                          );
                                      java.awt.geom.AffineTransform txtTxf =
                                        transformText(
                                          x,
                                          y);
                                      org.w3c.dom.Element text =
                                        getDOMFactory(
                                          ).
                                        createElementNS(
                                          SVG_NAMESPACE_URI,
                                          SVG_TEXT_TAG);
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_X_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              x));
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_Y_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              y));
                                      text.
                                        setAttributeNS(
                                          XML_NAMESPACE_URI,
                                          XML_SPACE_QNAME,
                                          XML_PRESERVE_VALUE);
                                      text.
                                        appendChild(
                                          getDOMFactory(
                                            ).
                                            createTextNode(
                                              s));
                                      domGroupManager.
                                        addElement(
                                          text,
                                          org.apache.batik.svggen.DOMGroupManager.
                                            FILL);
                                      if (txtTxf !=
                                            null) {
                                          this.
                                            setTransform(
                                              savTxf);
                                      } }
    private java.awt.geom.AffineTransform transformText(float x,
                                                        float y) {
        java.awt.geom.AffineTransform txtTxf =
          null;
        java.awt.Font font =
          getFont(
            );
        if (font !=
              null) {
            txtTxf =
              font.
                getTransform(
                  );
            if (txtTxf !=
                  null &&
                  !txtTxf.
                  isIdentity(
                    )) {
                java.awt.geom.AffineTransform t =
                  new java.awt.geom.AffineTransform(
                  );
                t.
                  translate(
                    x,
                    y);
                t.
                  concatenate(
                    txtTxf);
                t.
                  translate(
                    -x,
                    -y);
                this.
                  transform(
                    t);
            }
            else {
                txtTxf =
                  null;
            }
        }
        return txtTxf;
    }
    public void drawString(java.text.AttributedCharacterIterator ati,
                           float x,
                           float y) { if (textAsShapes ||
                                            usesUnsupportedAttributes(
                                              ati)) {
                                          java.awt.font.TextLayout layout =
                                            new java.awt.font.TextLayout(
                                            ati,
                                            getFontRenderContext(
                                              ));
                                          layout.
                                            draw(
                                              this,
                                              x,
                                              y);
                                          return;
                                      }
                                      boolean multiSpans =
                                        false;
                                      if (ati.
                                            getRunLimit(
                                              ) <
                                            ati.
                                            getEndIndex(
                                              ))
                                          multiSpans =
                                            true;
                                      org.w3c.dom.Element text =
                                        getDOMFactory(
                                          ).
                                        createElementNS(
                                          SVG_NAMESPACE_URI,
                                          SVG_TEXT_TAG);
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_X_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              x));
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_Y_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              y));
                                      text.
                                        setAttributeNS(
                                          XML_NAMESPACE_URI,
                                          XML_SPACE_QNAME,
                                          XML_PRESERVE_VALUE);
                                      java.awt.Font baseFont =
                                        getFont(
                                          );
                                      java.awt.Paint basePaint =
                                        getPaint(
                                          );
                                      char ch =
                                        ati.
                                        first(
                                          );
                                      setTextElementFill(
                                        ati);
                                      setTextFontAttributes(
                                        ati,
                                        baseFont);
                                      org.apache.batik.svggen.SVGGraphicContext textGC;
                                      textGC =
                                        domTreeManager.
                                          getGraphicContextConverter(
                                            ).
                                          toSVG(
                                            gc);
                                      domGroupManager.
                                        addElement(
                                          text,
                                          org.apache.batik.svggen.DOMGroupManager.
                                            FILL);
                                      textGC.
                                        getContext(
                                          ).
                                        put(
                                          SVG_STROKE_ATTRIBUTE,
                                          SVG_NONE_VALUE);
                                      textGC.
                                        getGroupContext(
                                          ).
                                        put(
                                          SVG_STROKE_ATTRIBUTE,
                                          SVG_NONE_VALUE);
                                      boolean firstSpan =
                                        true;
                                      java.awt.geom.AffineTransform savTxf =
                                        getTransform(
                                          );
                                      java.awt.geom.AffineTransform txtTxf =
                                        null;
                                      while (ch !=
                                               java.text.AttributedCharacterIterator.
                                                 DONE) {
                                          org.w3c.dom.Element tspan =
                                            text;
                                          if (multiSpans) {
                                              tspan =
                                                getDOMFactory(
                                                  ).
                                                  createElementNS(
                                                    SVG_NAMESPACE_URI,
                                                    SVG_TSPAN_TAG);
                                              text.
                                                appendChild(
                                                  tspan);
                                          }
                                          setTextElementFill(
                                            ati);
                                          boolean resetTransform =
                                            setTextFontAttributes(
                                              ati,
                                              baseFont);
                                          if (resetTransform ||
                                                firstSpan) {
                                              txtTxf =
                                                transformText(
                                                  x,
                                                  y);
                                              firstSpan =
                                                false;
                                          }
                                          int start =
                                            ati.
                                            getIndex(
                                              );
                                          int end =
                                            ati.
                                            getRunLimit(
                                              ) -
                                            1;
                                          java.lang.StringBuffer buf =
                                            new java.lang.StringBuffer(
                                            end -
                                              start);
                                          buf.
                                            append(
                                              ch);
                                          for (int i =
                                                 start;
                                               i <
                                                 end;
                                               i++) {
                                              ch =
                                                ati.
                                                  next(
                                                    );
                                              buf.
                                                append(
                                                  ch);
                                          }
                                          java.lang.String s =
                                            buf.
                                            toString(
                                              );
                                          if (generatorCtx.
                                                isEmbeddedFontsOn(
                                                  )) {
                                              getDOMTreeManager(
                                                ).
                                                getGraphicContextConverter(
                                                  ).
                                                getFontConverter(
                                                  ).
                                                recordFontUsage(
                                                  s,
                                                  getFont(
                                                    ));
                                          }
                                          org.apache.batik.svggen.SVGGraphicContext elementGC;
                                          elementGC =
                                            domTreeManager.
                                              gcConverter.
                                              toSVG(
                                                gc);
                                          elementGC.
                                            getGroupContext(
                                              ).
                                            put(
                                              SVG_STROKE_ATTRIBUTE,
                                              SVG_NONE_VALUE);
                                          org.apache.batik.svggen.SVGGraphicContext deltaGC;
                                          deltaGC =
                                            org.apache.batik.svggen.DOMGroupManager.
                                              processDeltaGC(
                                                elementGC,
                                                textGC);
                                          setTextElementAttributes(
                                            deltaGC,
                                            ati);
                                          domTreeManager.
                                            getStyleHandler(
                                              ).
                                            setStyle(
                                              tspan,
                                              deltaGC.
                                                getContext(
                                                  ),
                                              domTreeManager.
                                                getGeneratorContext(
                                                  ));
                                          tspan.
                                            appendChild(
                                              getDOMFactory(
                                                ).
                                                createTextNode(
                                                  s));
                                          if ((resetTransform ||
                                                 firstSpan) &&
                                                txtTxf !=
                                                null) {
                                              this.
                                                setTransform(
                                                  savTxf);
                                          }
                                          ch =
                                            ati.
                                              next(
                                                );
                                      }
                                      setFont(
                                        baseFont);
                                      setPaint(
                                        basePaint);
    }
    public void fill(java.awt.Shape s) { org.w3c.dom.Element svgShape =
                                           shapeConverter.
                                           toSVG(
                                             s);
                                         if (svgShape !=
                                               null) {
                                             domGroupManager.
                                               addElement(
                                                 svgShape,
                                                 org.apache.batik.svggen.DOMGroupManager.
                                                   FILL);
                                         }
    }
    private boolean setTextFontAttributes(java.text.AttributedCharacterIterator ati,
                                          java.awt.Font baseFont) {
        boolean resetTransform =
          false;
        if (ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FONT) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FAMILY) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  WEIGHT) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  POSTURE) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  SIZE) !=
              null) {
            java.util.Map m =
              ati.
              getAttributes(
                );
            java.awt.Font f =
              baseFont.
              deriveFont(
                m);
            setFont(
              f);
            resetTransform =
              true;
        }
        return resetTransform;
    }
    private void setTextElementFill(java.text.AttributedCharacterIterator ati) {
        if (ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FOREGROUND) !=
              null) {
            java.awt.Color color =
              (java.awt.Color)
                ati.
                getAttribute(
                  java.awt.font.TextAttribute.
                    FOREGROUND);
            setPaint(
              color);
        }
    }
    private void setTextElementAttributes(org.apache.batik.svggen.SVGGraphicContext tspanGC,
                                          java.text.AttributedCharacterIterator ati) {
        java.lang.String decoration =
          "";
        if (isUnderline(
              ati))
            decoration +=
              CSS_UNDERLINE_VALUE +
              " ";
        if (isStrikeThrough(
              ati))
            decoration +=
              CSS_LINE_THROUGH_VALUE +
              " ";
        int len =
          decoration.
          length(
            );
        if (len !=
              0)
            tspanGC.
              getContext(
                ).
              put(
                CSS_TEXT_DECORATION_PROPERTY,
                decoration.
                  substring(
                    0,
                    len -
                      1));
    }
    private boolean isBold(java.text.AttributedCharacterIterator ati) {
        java.lang.Object weight =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              WEIGHT);
        if (weight ==
              null)
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_REGULAR))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_DEMILIGHT))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_EXTRA_LIGHT))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_LIGHT))
            return false;
        return true;
    }
    private boolean isItalic(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              POSTURE);
        if (java.awt.font.TextAttribute.
              POSTURE_OBLIQUE.
              equals(
                attr))
            return true;
        return false;
    }
    private boolean isUnderline(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              UNDERLINE);
        if (java.awt.font.TextAttribute.
              UNDERLINE_ON.
              equals(
                attr))
            return true;
        else
            return false;
    }
    private boolean isStrikeThrough(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              STRIKETHROUGH);
        if (java.awt.font.TextAttribute.
              STRIKETHROUGH_ON.
              equals(
                attr))
            return true;
        return false;
    }
    public java.awt.GraphicsConfiguration getDeviceConfiguration() {
        return null;
    }
    protected java.util.Set unsupportedAttributes;
    { unsupportedAttributes = new java.util.HashSet(
                                );
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  BACKGROUND);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  BIDI_EMBEDDING);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  CHAR_REPLACEMENT);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  JUSTIFICATION);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  RUN_DIRECTION);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  SUPERSCRIPT);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  SWAP_COLORS);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  TRANSFORM);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  WIDTH);
    }
    public void setUnsupportedAttributes(java.util.Set attrs) {
        if (attrs ==
              null)
            unsupportedAttributes =
              null;
        else
            unsupportedAttributes =
              new java.util.HashSet(
                attrs);
    }
    public boolean usesUnsupportedAttributes(java.text.AttributedCharacterIterator aci) {
        if (unsupportedAttributes ==
              null)
            return false;
        java.util.Set allAttrs =
          aci.
          getAllAttributeKeys(
            );
        java.util.Iterator iter =
          allAttrs.
          iterator(
            );
        while (iter.
                 hasNext(
                   )) {
            if (unsupportedAttributes.
                  contains(
                    iter.
                      next(
                        ))) {
                return true;
            }
        }
        return false;
    }
    public static final java.lang.String jlc$CompilerVersion$jl7 =
      "2.7.0";
    public static final long jlc$SourceLastModified$jl7 =
      1471028785000L;
    public static final java.lang.String jlc$ClassType$jl7 =
      ("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");
    public static final java.lang.String jlc$CompilerVersion$jl5 =
      "2.7.0";
    public static final long jlc$SourceLastModified$jl5 =
      1471028785000L;
    public static final java.lang.String jlc$ClassType$jl5 =
      ("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" +
       "uNSej0muTM3NnDKqYnon1ApDtqz10aqo");
    public static final java.lang.String jlc$ClassType$jl5$1 =
      ("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" +
       "2cgv6wtERXr5Rs+jl0MKd8QpqzNRrzLRl6rhFFRkTkg9yScqQakVIrE883v6" +
       "oqzVYbS1aPZaWcogBzxhVxfGEKIsqyOu2uFk6ge5aJbrkT5WqZf4cjY/KS3j" +
       "nDEYsROzBwbDhFVR8W6Pb2BiYa6HPkKNsgw0t0sON8m62ZCWKk2awaga1e0Z" +
       "pN3LLgd5BW9aZtFFCsqizaMoGG77tRzkiVCpt5jjZsUpFa3Jyg3Mdo5sU1DR" +
       "DwxfrUjZcNZCK8subVCavejOWDjnoPrYoYyRlaN7TU0p0ktkMG12FtyUtAac" +
       "OMwN5Slgdlc9mfXJ2LJVbuROhsaYRlqrthyJWd93A89GOpVmX2qadXwBNWJK" +
       "JeRRf0KVYbOBtky1qqoNpWsuFkNhKFuE5MfSSELUAi3a8Bxx0ZHd7VbCLJJV" +
       "4njYIXzbFPOyBOUgMLzINXGSs5Nbxq95TXIb+UvXdnv7zvTW/NETVf+Cm/KL" +
       "Ky3pTP+Spfyv33x//YklCscWVh5cumIkvZuPWa6jJuvyD4+9eNeanaUTSkdr" +
       "Hk5dBUaAqvCPHsJLlie/6LSns9KlyR9665NPKdyHkcMFGEyYuSl0vVdZ6ly1" +
       "jsmPgjM9evqSDjZ9OG27OvO33vrX9/W+bfqGa3gM5oETcp485U+yH/tt6mXy" +
       "v93PHByt1bzssblLCz126QrNm301jHynd8k6zRcdVee3JLWXBduPbarzx06u" +
       "ONkazGWmt39kehur27Fa9x93HPtmkvx9mLkDBIag1rcLo5L9P7s11n+45lXM" +
       "/+cINLXd14LtoxvQj54j6LF1yz+bZNi78XTavZuT5ADQBidor7jqZO7qypEG" +
       "9q47gwYeTnaWwfbJjQY++exU9d7zdxx7QZLcBTwCqOorLW0Xt6x3n4H1vkOz" +
       "/sUN6y8+S6wv3XHs4SS5H3jixKwvWa+Y5P7olvSBM5A+mOxEwPb0hvTpZ4l0" +
       "x8NLe8nq7b1H16SXL8l975Y0ewbSe5KdyZLyz2xIP3OtpO9+Ri34vSnSYztw" +
       "k+54DwW4wRVw927Z4pbOgPtQshMF2+c3uJ8/R9zjNNSOY40kqYWZu9YVe3KR" +
       "8g9vUbGz1iwJts2yx8xlyx7Pp2Z/OGXq7uAVkqQFeIMr8R6vWu6s3unlYPvS" +
       "hvdLz1KbfXzHMSlJxDBz67pq18/vLZOc8Jby9WegvD/Z+SqwfXlD+eVnidLc" +
       "cSxZgLk3CTO3A8rjj/AleatbTu2s/epjYPu7DeffPUuc8Y5jScXt+WHmeYf9" +
       "qi5f6YnFU580O61Mqp2rPiSzQzsvSXYWwfa1jXa+9ixp5207jj2RJG9eRx0n" +
       "n81M8mNb1recNcZkwPZPG9Z/OkfWY34MS6HeuwP4B5Lk+wFwcEXg447s35wB" +
       "OMmaRCB7D6/Lrj+vGTi+IvDBdnibLk2vbtE/uAP9R5PkA2Hm3nGkW8opT1Ae" +
       "CzN/6Az86Xr9OuBubvib18B//MGF0+taTKF+cgfwTyXJh9Z1fQXW43X94TOw" +
       "po+BPgqkemLD+sS1sr7iaqyrlOfnr5zh0IXBz+itFw2OWMiqlwy/05N+Kkk+" +
       "kT5D6KuSfUIvnzyrXr4VCPjejV7eez562d82knTSJn3od+83TtXe3i+kGT6d" +
       "JL96GuivnRUUNPC9j2xAP3KuBnBYv+snP3T34sDXwVAphfqvV6P+/ST57GnU" +
       "v3NWahCb7m1GzXvXMmreQb31bnufT6t3W8d/cjXaLybJH51G+8dnpQW99d4v" +
       "b2h/+byNeUObcvzV1UD/Jkn+4jTQ/3lWUDC62vv0BvTT5wp6aMx3H38XSPLq" +
       "MTV95Hbv8yne167G/3+T5Cun8X/1rPwDcLEvbPi/cD7823dq7H39Cra9f3AV" +
       "5P0Lyddvnob8z2cddYEObP+Gddn159mRj/XF+7fvOHZnkty8nuXE1YnupC/n" +
       "6arr18Z9+tKqecEuOS91lZt3uaQvxdm/50hX+885g67uTna+FFz7ro0Md52/" +
       "rh7YcSy56bB/31pXPddjkon5dDCeGtaW8VvOg/HBDeOD58N4LKBZ23x2B+ir" +
       "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");
}
