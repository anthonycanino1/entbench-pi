package org.apache.batik.svggen;
public class SVGGraphics2D extends org.apache.batik.ext.awt.g2d.AbstractGraphics2D implements java.lang.Cloneable, org.apache.batik.svggen.SVGSyntax, org.apache.batik.svggen.ErrorConstants {
    public static final java.lang.String DEFAULT_XML_ENCODING = "ISO-8859-1";
    public static final int DEFAULT_MAX_GC_OVERRIDES = 3;
    protected org.apache.batik.svggen.DOMTreeManager domTreeManager;
    protected org.apache.batik.svggen.DOMGroupManager domGroupManager;
    protected org.apache.batik.svggen.SVGGeneratorContext generatorCtx;
    protected org.apache.batik.svggen.SVGShape shapeConverter;
    protected java.awt.Dimension svgCanvasSize;
    protected java.awt.Graphics2D fmg;
    { java.awt.image.BufferedImage bi = new java.awt.image.BufferedImage(
        1,
        1,
        java.awt.image.BufferedImage.
          TYPE_INT_ARGB);
      fmg = bi.createGraphics(); }
    public final java.awt.Dimension getSVGCanvasSize() { return svgCanvasSize;
    }
    public final void setSVGCanvasSize(java.awt.Dimension svgCanvasSize) {
        this.
          svgCanvasSize =
          new java.awt.Dimension(
            svgCanvasSize);
    }
    public final org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext() {
        return generatorCtx;
    }
    public final org.apache.batik.svggen.SVGShape getShapeConverter() {
        return shapeConverter;
    }
    public final org.apache.batik.svggen.DOMTreeManager getDOMTreeManager() {
        return domTreeManager;
    }
    protected final void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager treeMgr) {
        this.
          domTreeManager =
          treeMgr;
        generatorCtx.
          genericImageHandler.
          setDOMTreeManager(
            domTreeManager);
    }
    protected final org.apache.batik.svggen.DOMGroupManager getDOMGroupManager() {
        return domGroupManager;
    }
    protected final void setDOMGroupManager(org.apache.batik.svggen.DOMGroupManager groupMgr) {
        this.
          domGroupManager =
          groupMgr;
    }
    public final org.w3c.dom.Document getDOMFactory() {
        return generatorCtx.
                 domFactory;
    }
    public final org.apache.batik.svggen.ImageHandler getImageHandler() {
        return generatorCtx.
                 imageHandler;
    }
    public final org.apache.batik.svggen.GenericImageHandler getGenericImageHandler() {
        return generatorCtx.
                 genericImageHandler;
    }
    public final org.apache.batik.svggen.ExtensionHandler getExtensionHandler() {
        return generatorCtx.
                 extensionHandler;
    }
    public final void setExtensionHandler(org.apache.batik.svggen.ExtensionHandler extensionHandler) {
        generatorCtx.
          setExtensionHandler(
            extensionHandler);
    }
    public SVGGraphics2D(org.w3c.dom.Document domFactory) {
        this(
          org.apache.batik.svggen.SVGGeneratorContext.
            createDefault(
              domFactory),
          false);
    }
    public SVGGraphics2D(org.w3c.dom.Document domFactory,
                         org.apache.batik.svggen.ImageHandler imageHandler,
                         org.apache.batik.svggen.ExtensionHandler extensionHandler,
                         boolean textAsShapes) {
        this(
          buildSVGGeneratorContext(
            domFactory,
            imageHandler,
            extensionHandler),
          textAsShapes);
    }
    public static org.apache.batik.svggen.SVGGeneratorContext buildSVGGeneratorContext(org.w3c.dom.Document domFactory,
                                                                                       org.apache.batik.svggen.ImageHandler imageHandler,
                                                                                       org.apache.batik.svggen.ExtensionHandler extensionHandler) {
        org.apache.batik.svggen.SVGGeneratorContext generatorCtx =
          new org.apache.batik.svggen.SVGGeneratorContext(
          domFactory);
        generatorCtx.
          setIDGenerator(
            new org.apache.batik.svggen.SVGIDGenerator(
              ));
        generatorCtx.
          setExtensionHandler(
            extensionHandler);
        generatorCtx.
          setImageHandler(
            imageHandler);
        generatorCtx.
          setStyleHandler(
            new org.apache.batik.svggen.DefaultStyleHandler(
              ));
        generatorCtx.
          setComment(
            "Generated by the Batik Graphics2D SVG Generator");
        generatorCtx.
          setErrorHandler(
            new org.apache.batik.svggen.DefaultErrorHandler(
              ));
        return generatorCtx;
    }
    public SVGGraphics2D(org.apache.batik.svggen.SVGGeneratorContext generatorCtx,
                         boolean textAsShapes) {
        super(
          textAsShapes);
        if (generatorCtx ==
              null)
            throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
              ERR_CONTEXT_NULL);
        setGeneratorContext(
          generatorCtx);
    }
    protected void setGeneratorContext(org.apache.batik.svggen.SVGGeneratorContext generatorCtx) {
        this.
          generatorCtx =
          generatorCtx;
        this.
          gc =
          new org.apache.batik.ext.awt.g2d.GraphicContext(
            new java.awt.geom.AffineTransform(
              ));
        org.apache.batik.svggen.SVGGeneratorContext.GraphicContextDefaults gcDefaults =
          generatorCtx.
          getGraphicContextDefaults(
            );
        if (gcDefaults !=
              null) {
            if (gcDefaults.
                  getPaint(
                    ) !=
                  null) {
                gc.
                  setPaint(
                    gcDefaults.
                      getPaint(
                        ));
            }
            if (gcDefaults.
                  getStroke(
                    ) !=
                  null) {
                gc.
                  setStroke(
                    gcDefaults.
                      getStroke(
                        ));
            }
            if (gcDefaults.
                  getComposite(
                    ) !=
                  null) {
                gc.
                  setComposite(
                    gcDefaults.
                      getComposite(
                        ));
            }
            if (gcDefaults.
                  getClip(
                    ) !=
                  null) {
                gc.
                  setClip(
                    gcDefaults.
                      getClip(
                        ));
            }
            if (gcDefaults.
                  getRenderingHints(
                    ) !=
                  null) {
                gc.
                  setRenderingHints(
                    gcDefaults.
                      getRenderingHints(
                        ));
            }
            if (gcDefaults.
                  getFont(
                    ) !=
                  null) {
                gc.
                  setFont(
                    gcDefaults.
                      getFont(
                        ));
            }
            if (gcDefaults.
                  getBackground(
                    ) !=
                  null) {
                gc.
                  setBackground(
                    gcDefaults.
                      getBackground(
                        ));
            }
        }
        this.
          shapeConverter =
          new org.apache.batik.svggen.SVGShape(
            generatorCtx);
        this.
          domTreeManager =
          new org.apache.batik.svggen.DOMTreeManager(
            gc,
            generatorCtx,
            DEFAULT_MAX_GC_OVERRIDES);
        this.
          domGroupManager =
          new org.apache.batik.svggen.DOMGroupManager(
            gc,
            domTreeManager);
        this.
          domTreeManager.
          addGroupManager(
            domGroupManager);
        generatorCtx.
          genericImageHandler.
          setDOMTreeManager(
            domTreeManager);
    }
    public SVGGraphics2D(org.apache.batik.svggen.SVGGraphics2D g) {
        super(
          g);
        this.
          generatorCtx =
          g.
            generatorCtx;
        this.
          gc.
          validateTransformStack(
            );
        this.
          shapeConverter =
          g.
            shapeConverter;
        this.
          domTreeManager =
          g.
            domTreeManager;
        this.
          domGroupManager =
          new org.apache.batik.svggen.DOMGroupManager(
            this.
              gc,
            this.
              domTreeManager);
        this.
          domTreeManager.
          addGroupManager(
            this.
              domGroupManager);
    }
    public void stream(java.lang.String svgFileName)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          svgFileName,
          false);
    }
    public void stream(java.lang.String svgFileName,
                       boolean useCss) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        try {
            java.io.OutputStreamWriter writer =
              new java.io.OutputStreamWriter(
              new java.io.FileOutputStream(
                svgFileName),
              DEFAULT_XML_ENCODING);
            stream(
              writer,
              useCss);
            writer.
              flush(
                );
            writer.
              close(
                );
        }
        catch (org.apache.batik.svggen.SVGGraphics2DIOException io) {
            throw io;
        }
        catch (java.io.IOException e) {
            generatorCtx.
              errorHandler.
              handleError(
                new org.apache.batik.svggen.SVGGraphics2DIOException(
                  e));
        }
    }
    public void stream(java.io.Writer writer)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          writer,
          false);
    }
    public void stream(java.io.Writer writer,
                       boolean useCss,
                       boolean escaped) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Element svgRoot =
          getRoot(
            );
        stream(
          svgRoot,
          writer,
          useCss,
          escaped);
    }
    public void stream(java.io.Writer writer,
                       boolean useCss) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Element svgRoot =
          getRoot(
            );
        stream(
          svgRoot,
          writer,
          useCss,
          false);
    }
    public void stream(org.w3c.dom.Element svgRoot,
                       java.io.Writer writer)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          svgRoot,
          writer,
          false,
          false);
    }
    public void stream(org.w3c.dom.Element svgRoot,
                       java.io.Writer writer,
                       boolean useCss,
                       boolean escaped) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Node rootParent =
          svgRoot.
          getParentNode(
            );
        org.w3c.dom.Node nextSibling =
          svgRoot.
          getNextSibling(
            );
        try {
            svgRoot.
              setAttributeNS(
                XMLNS_NAMESPACE_URI,
                XMLNS_PREFIX,
                SVG_NAMESPACE_URI);
            svgRoot.
              setAttributeNS(
                XMLNS_NAMESPACE_URI,
                XMLNS_PREFIX +
                ":" +
                XLINK_PREFIX,
                XLINK_NAMESPACE_URI);
            org.w3c.dom.DocumentFragment svgDocument =
              svgRoot.
              getOwnerDocument(
                ).
              createDocumentFragment(
                );
            svgDocument.
              appendChild(
                svgRoot);
            if (useCss)
                org.apache.batik.svggen.SVGCSSStyler.
                  style(
                    svgDocument);
            org.apache.batik.svggen.XmlWriter.
              writeXml(
                svgDocument,
                writer,
                escaped);
            writer.
              flush(
                );
        }
        catch (org.apache.batik.svggen.SVGGraphics2DIOException e) {
            generatorCtx.
              errorHandler.
              handleError(
                e);
        }
        catch (java.io.IOException io) {
            generatorCtx.
              errorHandler.
              handleError(
                new org.apache.batik.svggen.SVGGraphics2DIOException(
                  io));
        }
        finally {
            if (rootParent !=
                  null) {
                if (nextSibling ==
                      null) {
                    rootParent.
                      appendChild(
                        svgRoot);
                }
                else {
                    rootParent.
                      insertBefore(
                        svgRoot,
                        nextSibling);
                }
            }
        }
    }
    public java.util.List getDefinitionSet() {
        return domTreeManager.
          getDefinitionSet(
            );
    }
    public org.w3c.dom.Element getTopLevelGroup() {
        return getTopLevelGroup(
                 true);
    }
    public org.w3c.dom.Element getTopLevelGroup(boolean includeDefinitionSet) {
        return domTreeManager.
          getTopLevelGroup(
            includeDefinitionSet);
    }
    public void setTopLevelGroup(org.w3c.dom.Element topLevelGroup) {
        domTreeManager.
          setTopLevelGroup(
            topLevelGroup);
    }
    public org.w3c.dom.Element getRoot() {
        return getRoot(
                 null);
    }
    public org.w3c.dom.Element getRoot(org.w3c.dom.Element svgRoot) {
        svgRoot =
          domTreeManager.
            getRoot(
              svgRoot);
        if (svgCanvasSize !=
              null) {
            svgRoot.
              setAttributeNS(
                null,
                SVG_WIDTH_ATTRIBUTE,
                java.lang.String.
                  valueOf(
                    svgCanvasSize.
                      width));
            svgRoot.
              setAttributeNS(
                null,
                SVG_HEIGHT_ATTRIBUTE,
                java.lang.String.
                  valueOf(
                    svgCanvasSize.
                      height));
        }
        return svgRoot;
    }
    public java.awt.Graphics create() { return new org.apache.batik.svggen.SVGGraphics2D(
                                          this);
    }
    public void setXORMode(java.awt.Color c1) {
        generatorCtx.
          errorHandler.
          handleError(
            new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
              ERR_XOR));
    }
    public java.awt.FontMetrics getFontMetrics(java.awt.Font f) {
        return fmg.
          getFontMetrics(
            f);
    }
    public void copyArea(int x, int y, int width,
                         int height,
                         int dx,
                         int dy) {  }
    public boolean drawImage(java.awt.Image img,
                             int x,
                             int y,
                             java.awt.image.ImageObserver observer) {
        org.w3c.dom.Element imageElement =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            imageElement,
            x,
            y,
            img.
              getWidth(
                null),
            img.
              getHeight(
                null),
            getGeneratorContext(
              ));
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                imageElement);
        }
        else {
            java.awt.geom.AffineTransform inverseTransform =
              null;
            try {
                inverseTransform =
                  xform.
                    createInverse(
                      );
            }
            catch (java.awt.geom.NoninvertibleTransformException e) {
                throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                  ERR_UNEXPECTED);
            }
            gc.
              transform(
                xform);
            domGroupManager.
              addElement(
                imageElement);
            gc.
              transform(
                inverseTransform);
        }
        return true;
    }
    public boolean drawImage(java.awt.Image img,
                             int x,
                             int y,
                             int width,
                             int height,
                             java.awt.image.ImageObserver observer) {
        org.w3c.dom.Element imageElement =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            imageElement,
            x,
            y,
            width,
            height,
            getGeneratorContext(
              ));
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                imageElement);
        }
        else {
            java.awt.geom.AffineTransform inverseTransform =
              null;
            try {
                inverseTransform =
                  xform.
                    createInverse(
                      );
            }
            catch (java.awt.geom.NoninvertibleTransformException e) {
                throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                  ERR_UNEXPECTED);
            }
            gc.
              transform(
                xform);
            domGroupManager.
              addElement(
                imageElement);
            gc.
              transform(
                inverseTransform);
        }
        return true;
    }
    public void dispose() { this.domTreeManager.
                              removeGroupManager(
                                this.
                                  domGroupManager);
    }
    public void draw(java.awt.Shape s) { java.awt.Stroke stroke =
                                           gc.
                                           getStroke(
                                             );
                                         if (stroke instanceof java.awt.BasicStroke) {
                                             org.w3c.dom.Element svgShape =
                                               shapeConverter.
                                               toSVG(
                                                 s);
                                             if (svgShape !=
                                                   null) {
                                                 domGroupManager.
                                                   addElement(
                                                     svgShape,
                                                     org.apache.batik.svggen.DOMGroupManager.
                                                       DRAW);
                                             }
                                         }
                                         else {
                                             java.awt.Shape strokedShape =
                                               stroke.
                                               createStrokedShape(
                                                 s);
                                             fill(
                                               strokedShape);
                                         }
    }
    public boolean drawImage(java.awt.Image img,
                             java.awt.geom.AffineTransform xform,
                             java.awt.image.ImageObserver obs) {
        boolean retVal =
          true;
        if (xform ==
              null) {
            retVal =
              drawImage(
                img,
                0,
                0,
                null);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                retVal =
                  drawImage(
                    img,
                    0,
                    0,
                    null);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                retVal =
                  drawImage(
                    img,
                    0,
                    0,
                    null);
                gc.
                  setTransform(
                    savTransform);
            }
        return retVal;
    }
    public void drawImage(java.awt.image.BufferedImage img,
                          java.awt.image.BufferedImageOp op,
                          int x,
                          int y) { img = op.
                                           filter(
                                             img,
                                             null);
                                   drawImage(
                                     img,
                                     x,
                                     y,
                                     null);
    }
    public void drawRenderedImage(java.awt.image.RenderedImage img,
                                  java.awt.geom.AffineTransform trans2) {
        org.w3c.dom.Element image =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform trans1 =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            image,
            img.
              getMinX(
                ),
            img.
              getMinY(
                ),
            img.
              getWidth(
                ),
            img.
              getHeight(
                ),
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform;
        if (trans2 ==
              null) {
            xform =
              trans1;
        }
        else {
            if (trans1 ==
                  null) {
                xform =
                  trans2;
            }
            else {
                xform =
                  new java.awt.geom.AffineTransform(
                    trans2);
                xform.
                  concatenate(
                    trans1);
            }
        }
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                image);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  setTransform(
                    savTransform);
            }
    }
    public void drawRenderableImage(java.awt.image.renderable.RenderableImage img,
                                    java.awt.geom.AffineTransform trans2) {
        org.w3c.dom.Element image =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform trans1 =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            image,
            img.
              getMinX(
                ),
            img.
              getMinY(
                ),
            img.
              getWidth(
                ),
            img.
              getHeight(
                ),
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform;
        if (trans2 ==
              null) {
            xform =
              trans1;
        }
        else {
            if (trans1 ==
                  null) {
                xform =
                  trans2;
            }
            else {
                xform =
                  new java.awt.geom.AffineTransform(
                    trans2);
                xform.
                  concatenate(
                    trans1);
            }
        }
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                image);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  setTransform(
                    savTransform);
            }
    }
    public void drawString(java.lang.String s,
                           float x,
                           float y) { if (textAsShapes) {
                                          java.awt.font.GlyphVector gv =
                                            getFont(
                                              ).
                                            createGlyphVector(
                                              getFontRenderContext(
                                                ),
                                              s);
                                          drawGlyphVector(
                                            gv,
                                            x,
                                            y);
                                          return;
                                      }
                                      if (generatorCtx.
                                            svgFont) {
                                          domTreeManager.
                                            gcConverter.
                                            getFontConverter(
                                              ).
                                            recordFontUsage(
                                              s,
                                              getFont(
                                                ));
                                      }
                                      java.awt.geom.AffineTransform savTxf =
                                        getTransform(
                                          );
                                      java.awt.geom.AffineTransform txtTxf =
                                        transformText(
                                          x,
                                          y);
                                      org.w3c.dom.Element text =
                                        getDOMFactory(
                                          ).
                                        createElementNS(
                                          SVG_NAMESPACE_URI,
                                          SVG_TEXT_TAG);
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_X_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              x));
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_Y_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              y));
                                      text.
                                        setAttributeNS(
                                          XML_NAMESPACE_URI,
                                          XML_SPACE_QNAME,
                                          XML_PRESERVE_VALUE);
                                      text.
                                        appendChild(
                                          getDOMFactory(
                                            ).
                                            createTextNode(
                                              s));
                                      domGroupManager.
                                        addElement(
                                          text,
                                          org.apache.batik.svggen.DOMGroupManager.
                                            FILL);
                                      if (txtTxf !=
                                            null) {
                                          this.
                                            setTransform(
                                              savTxf);
                                      } }
    private java.awt.geom.AffineTransform transformText(float x,
                                                        float y) {
        java.awt.geom.AffineTransform txtTxf =
          null;
        java.awt.Font font =
          getFont(
            );
        if (font !=
              null) {
            txtTxf =
              font.
                getTransform(
                  );
            if (txtTxf !=
                  null &&
                  !txtTxf.
                  isIdentity(
                    )) {
                java.awt.geom.AffineTransform t =
                  new java.awt.geom.AffineTransform(
                  );
                t.
                  translate(
                    x,
                    y);
                t.
                  concatenate(
                    txtTxf);
                t.
                  translate(
                    -x,
                    -y);
                this.
                  transform(
                    t);
            }
            else {
                txtTxf =
                  null;
            }
        }
        return txtTxf;
    }
    public void drawString(java.text.AttributedCharacterIterator ati,
                           float x,
                           float y) { if (textAsShapes ||
                                            usesUnsupportedAttributes(
                                              ati)) {
                                          java.awt.font.TextLayout layout =
                                            new java.awt.font.TextLayout(
                                            ati,
                                            getFontRenderContext(
                                              ));
                                          layout.
                                            draw(
                                              this,
                                              x,
                                              y);
                                          return;
                                      }
                                      boolean multiSpans =
                                        false;
                                      if (ati.
                                            getRunLimit(
                                              ) <
                                            ati.
                                            getEndIndex(
                                              ))
                                          multiSpans =
                                            true;
                                      org.w3c.dom.Element text =
                                        getDOMFactory(
                                          ).
                                        createElementNS(
                                          SVG_NAMESPACE_URI,
                                          SVG_TEXT_TAG);
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_X_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              x));
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_Y_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              y));
                                      text.
                                        setAttributeNS(
                                          XML_NAMESPACE_URI,
                                          XML_SPACE_QNAME,
                                          XML_PRESERVE_VALUE);
                                      java.awt.Font baseFont =
                                        getFont(
                                          );
                                      java.awt.Paint basePaint =
                                        getPaint(
                                          );
                                      char ch =
                                        ati.
                                        first(
                                          );
                                      setTextElementFill(
                                        ati);
                                      setTextFontAttributes(
                                        ati,
                                        baseFont);
                                      org.apache.batik.svggen.SVGGraphicContext textGC;
                                      textGC =
                                        domTreeManager.
                                          getGraphicContextConverter(
                                            ).
                                          toSVG(
                                            gc);
                                      domGroupManager.
                                        addElement(
                                          text,
                                          org.apache.batik.svggen.DOMGroupManager.
                                            FILL);
                                      textGC.
                                        getContext(
                                          ).
                                        put(
                                          SVG_STROKE_ATTRIBUTE,
                                          SVG_NONE_VALUE);
                                      textGC.
                                        getGroupContext(
                                          ).
                                        put(
                                          SVG_STROKE_ATTRIBUTE,
                                          SVG_NONE_VALUE);
                                      boolean firstSpan =
                                        true;
                                      java.awt.geom.AffineTransform savTxf =
                                        getTransform(
                                          );
                                      java.awt.geom.AffineTransform txtTxf =
                                        null;
                                      while (ch !=
                                               java.text.AttributedCharacterIterator.
                                                 DONE) {
                                          org.w3c.dom.Element tspan =
                                            text;
                                          if (multiSpans) {
                                              tspan =
                                                getDOMFactory(
                                                  ).
                                                  createElementNS(
                                                    SVG_NAMESPACE_URI,
                                                    SVG_TSPAN_TAG);
                                              text.
                                                appendChild(
                                                  tspan);
                                          }
                                          setTextElementFill(
                                            ati);
                                          boolean resetTransform =
                                            setTextFontAttributes(
                                              ati,
                                              baseFont);
                                          if (resetTransform ||
                                                firstSpan) {
                                              txtTxf =
                                                transformText(
                                                  x,
                                                  y);
                                              firstSpan =
                                                false;
                                          }
                                          int start =
                                            ati.
                                            getIndex(
                                              );
                                          int end =
                                            ati.
                                            getRunLimit(
                                              ) -
                                            1;
                                          java.lang.StringBuffer buf =
                                            new java.lang.StringBuffer(
                                            end -
                                              start);
                                          buf.
                                            append(
                                              ch);
                                          for (int i =
                                                 start;
                                               i <
                                                 end;
                                               i++) {
                                              ch =
                                                ati.
                                                  next(
                                                    );
                                              buf.
                                                append(
                                                  ch);
                                          }
                                          java.lang.String s =
                                            buf.
                                            toString(
                                              );
                                          if (generatorCtx.
                                                isEmbeddedFontsOn(
                                                  )) {
                                              getDOMTreeManager(
                                                ).
                                                getGraphicContextConverter(
                                                  ).
                                                getFontConverter(
                                                  ).
                                                recordFontUsage(
                                                  s,
                                                  getFont(
                                                    ));
                                          }
                                          org.apache.batik.svggen.SVGGraphicContext elementGC;
                                          elementGC =
                                            domTreeManager.
                                              gcConverter.
                                              toSVG(
                                                gc);
                                          elementGC.
                                            getGroupContext(
                                              ).
                                            put(
                                              SVG_STROKE_ATTRIBUTE,
                                              SVG_NONE_VALUE);
                                          org.apache.batik.svggen.SVGGraphicContext deltaGC;
                                          deltaGC =
                                            org.apache.batik.svggen.DOMGroupManager.
                                              processDeltaGC(
                                                elementGC,
                                                textGC);
                                          setTextElementAttributes(
                                            deltaGC,
                                            ati);
                                          domTreeManager.
                                            getStyleHandler(
                                              ).
                                            setStyle(
                                              tspan,
                                              deltaGC.
                                                getContext(
                                                  ),
                                              domTreeManager.
                                                getGeneratorContext(
                                                  ));
                                          tspan.
                                            appendChild(
                                              getDOMFactory(
                                                ).
                                                createTextNode(
                                                  s));
                                          if ((resetTransform ||
                                                 firstSpan) &&
                                                txtTxf !=
                                                null) {
                                              this.
                                                setTransform(
                                                  savTxf);
                                          }
                                          ch =
                                            ati.
                                              next(
                                                );
                                      }
                                      setFont(
                                        baseFont);
                                      setPaint(
                                        basePaint);
    }
    public void fill(java.awt.Shape s) { org.w3c.dom.Element svgShape =
                                           shapeConverter.
                                           toSVG(
                                             s);
                                         if (svgShape !=
                                               null) {
                                             domGroupManager.
                                               addElement(
                                                 svgShape,
                                                 org.apache.batik.svggen.DOMGroupManager.
                                                   FILL);
                                         }
    }
    private boolean setTextFontAttributes(java.text.AttributedCharacterIterator ati,
                                          java.awt.Font baseFont) {
        boolean resetTransform =
          false;
        if (ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FONT) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FAMILY) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  WEIGHT) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  POSTURE) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  SIZE) !=
              null) {
            java.util.Map m =
              ati.
              getAttributes(
                );
            java.awt.Font f =
              baseFont.
              deriveFont(
                m);
            setFont(
              f);
            resetTransform =
              true;
        }
        return resetTransform;
    }
    private void setTextElementFill(java.text.AttributedCharacterIterator ati) {
        if (ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FOREGROUND) !=
              null) {
            java.awt.Color color =
              (java.awt.Color)
                ati.
                getAttribute(
                  java.awt.font.TextAttribute.
                    FOREGROUND);
            setPaint(
              color);
        }
    }
    private void setTextElementAttributes(org.apache.batik.svggen.SVGGraphicContext tspanGC,
                                          java.text.AttributedCharacterIterator ati) {
        java.lang.String decoration =
          "";
        if (isUnderline(
              ati))
            decoration +=
              CSS_UNDERLINE_VALUE +
              " ";
        if (isStrikeThrough(
              ati))
            decoration +=
              CSS_LINE_THROUGH_VALUE +
              " ";
        int len =
          decoration.
          length(
            );
        if (len !=
              0)
            tspanGC.
              getContext(
                ).
              put(
                CSS_TEXT_DECORATION_PROPERTY,
                decoration.
                  substring(
                    0,
                    len -
                      1));
    }
    private boolean isBold(java.text.AttributedCharacterIterator ati) {
        java.lang.Object weight =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              WEIGHT);
        if (weight ==
              null)
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_REGULAR))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_DEMILIGHT))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_EXTRA_LIGHT))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_LIGHT))
            return false;
        return true;
    }
    private boolean isItalic(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              POSTURE);
        if (java.awt.font.TextAttribute.
              POSTURE_OBLIQUE.
              equals(
                attr))
            return true;
        return false;
    }
    private boolean isUnderline(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              UNDERLINE);
        if (java.awt.font.TextAttribute.
              UNDERLINE_ON.
              equals(
                attr))
            return true;
        else
            return false;
    }
    private boolean isStrikeThrough(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              STRIKETHROUGH);
        if (java.awt.font.TextAttribute.
              STRIKETHROUGH_ON.
              equals(
                attr))
            return true;
        return false;
    }
    public java.awt.GraphicsConfiguration getDeviceConfiguration() {
        return null;
    }
    protected java.util.Set unsupportedAttributes;
    { unsupportedAttributes = new java.util.HashSet(
                                );
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  BACKGROUND);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  BIDI_EMBEDDING);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  CHAR_REPLACEMENT);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  JUSTIFICATION);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  RUN_DIRECTION);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  SUPERSCRIPT);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  SWAP_COLORS);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  TRANSFORM);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  WIDTH);
    }
    public void setUnsupportedAttributes(java.util.Set attrs) {
        if (attrs ==
              null)
            unsupportedAttributes =
              null;
        else
            unsupportedAttributes =
              new java.util.HashSet(
                attrs);
    }
    public boolean usesUnsupportedAttributes(java.text.AttributedCharacterIterator aci) {
        if (unsupportedAttributes ==
              null)
            return false;
        java.util.Set allAttrs =
          aci.
          getAllAttributeKeys(
            );
        java.util.Iterator iter =
          allAttrs.
          iterator(
            );
        while (iter.
                 hasNext(
                   )) {
            if (unsupportedAttributes.
                  contains(
                    iter.
                      next(
                        ))) {
                return true;
            }
        }
        return false;
    }
    public static final java.lang.String jlc$CompilerVersion$jl7 =
      "2.7.0";
    public static final long jlc$SourceLastModified$jl7 =
      1471109864000L;
    public static final java.lang.String jlc$ClassType$jl7 =
      ("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");
    public static final java.lang.String jlc$CompilerVersion$jl5 =
      "2.7.0";
    public static final long jlc$SourceLastModified$jl5 =
      1471109864000L;
    public static final java.lang.String jlc$ClassType$jl5 =
      ("H4sIAAAAAAAAALWdC7QrWVmgc87p2y/63TQ0LTQN3Q3dHbhVlUclmQYlqVdS" +
       "qUollVQehdpUqiqVelfqkUriIIJgM+DwGBtEl7S6BmREFBh10PHVLmVEdBhQ" +
       "Z9RZS2Gps/AxumCtAZ1BcXZVck7OPfee3L6e02et2smp2rvq//7973//e9eu" +
       "ysf+NnMh8DNZz7WWmuWGF9VFeNGwihfDpacGF2mm2Jb8QFUwSwqCHtj3hPzy" +
       "T9z+9W+8Z3rHfuZ6MXO35DhuKIW66wS8GrjWXFWYzO3bvYSl2kGYuYMxpLkE" +
       "RaFuQYwehI8zmecdKxpmHmIORYCACBAQAUpFgKrbXKDQraoT2VhSQnLCYJb5" +
       "7swek7nekxPxwszLLj2JJ/mSvTlNOyUAZ7gx+b8PoNLCCz/zwBH7mvky4Pdl" +
       "oad+8Dvv+I8HmdvFzO26003EkYEQIbiImLnFVu2x6gdVRVEVMXOno6pKV/V1" +
       "ydJXqdxi5q5A1xwpjHz1SEnJzshT/fSaW83dIidsfiSHrn+EN9FVSzn878LE" +
       "kjTA+oIt65qQTPYDwJt1IJg/kWT1sMh1pu4oYealJ0scMT7UBBlA0RtsNZy6" +
       "R5e6zpHAjsxd67qzJEeDuqGvOxrIesGNwFXCzH2nnjTRtSfJpqSpT4SZe0/m" +
       "a68PgVw3pYpIioSZe05mS88Eaum+E7V0rH7+tvWad32XU3f2U5kVVbYS+W8E" +
       "he4/UYhXJ6qvOrK6LnjLY8z7pRf8ytv3MxmQ+Z4Tmdd5PvWvv/q6V93/zGfW" +
       "eb7lCnm4saHK4RPyh8a3feHF2KOVg0SMGz030JPKv4Q8Nf/25sjjCw+0vBcc" +
       "nTE5ePHw4DP8fxl9z0fVv9nP3NzIXC+7VmQDO7pTdm1Pt1SfUh3Vl0JVaWRu" +
       "Uh0FS483MjeA74zuqOu93GQSqGEjc52V7rreTf8HKpqAUyQqugF8152Je/jd" +
       "k8Jp+n3hZTKZG8CWyYPt2zPrv9cnSZgZQlPXViFJlhzdcaG27yb8AaQ64Rjo" +
       "dgqNgdWbUOBGPjBByPU1SAJ2MFUPD8w1TXWgbp+ifMmb6nKQwy8mFuY9h+de" +
       "JFx3xHt7QOUvPtngLdBW6q6lqP4T8lNRjfjqzzzxO/tHDWCjkTDzMLjcxfXl" +
       "LqaXu7i+3MVLLpfZ20uv8vzksutKBVVigsYN3N4tj3a/g37D219+AKzJi68D" +
       "+rwOZIVO977Y1h00UqcnA5vMPPOB+M39N8H7mf1L3WgiKth1c1K8nTi/Iyf3" +
       "0Mnmc6Xz3v7kX3794+9/o7ttSJf45U37vrxk0j5fflKpviurCvB429M/9oD0" +
       "80/8yhsf2s9cBxo9cHShBAwT+JD7T17jknb6+KHPS1guAOCJ69uSlRw6dFQ3" +
       "h1Pfjbd70tq+Lf1+J9Dx8xLDvTeT2bt+bcjrz+To3V6SPn9tHUmlnaBIfepr" +
       "u94H/+hzf5VP1X3ofm8/1qF11fDxY00+OdntaeO+c2sDPV9VQb4/+UD7B973" +
       "t0++PjUAkOPBK13woSTFQFMHVQjU/LbPzP74i3/6oT/YPzKavRD0edHY0uXF" +
       "EWSyP3PzDkhwtVds5QEuwwJNK7GahwTHdhV9oktjS02s9B9vfxj5+f/9rjvW" +
       "dmCBPYdm9Kqrn2C7/0W1zPf8znf+/f3pafbkpMva6mybbe0H796euer70jKR" +
       "Y/Hm33vJD/2W9EHgUYEXC/SVmjqmvbUOUvJ7wszzk2YZ5+WLimtfxF05soG3" +
       "SGsUSrM8lqYXE22kBTPpsXySvDQ43jIubXzH4o4n5Pf8wVdu7X/lV7+aolwa" +
       "uBw3BFbyHl/bXpI8sACnf+FJN1CXginIV3im9e13WM98A5xRBGeUgTsLOB+4" +
       "oMUlZrPJfeGG//nrv/GCN3zhILNPZm62XEkhpbQFZm4Cpq8GU+C9Ft63vW5d" +
       "9fGNILkjRc1cBp/uuO/ytvGCjdm84MptI0lfliQPX25xpxU9of7r1g4v+Rc+" +
       "rLyHTvOpDRsEB3XJUUBvd5j5kdMyE4tQdQJQH4cF/MyjOyJaX7dBQ51vogDo" +
       "jXd90fyRv/zpdQ9/MmQ4kVl9+1Pv+OeL73pq/1hc9eBloc3xMuvYKtXirWvV" +
       "/TP42wPbN5MtUVmyY9233oVtOvgHjnp4z0vM6GW7xEovQX7542/8pf/wxifX" +
       "GHddGlYQIGr+6f/xT7978QNf+u0r9Gw3jF3XUiUnlfJ1O1pNO0keTw8VkuQ1" +
       "a3MqncnyXrsxn9deu+WdVvQEwn4qwf6hHWV3deRrvbv+Jr5PitRTSUY79PId" +
       "SdLb6kU4D70sN3DLa9fLaUVPIGw8aXq+9KyTHYxpaChtGcfXwrjOe2/63y27" +
       "myeZjHa2UcO9/4+zxm/5s3+4zPWmwc4VWuyJ8iL0sR+5D/vWv0nLb6OOpPT9" +
       "i8uDQTAy3JbNfdT+2v7Lr//0fuYGMXOHvBl29iUrSvpyEQy1gsOxKBiaXnL8" +
       "0mHTeozw+FFU9eKTLuPYZU/GO9umCr4nuZPvN58Ice5NtIyBTVpXxvrzuNHs" +
       "gaDh5kaXe3W5XKy8Gkl2rh3ry9L0oSR5ZVo/B8nXR0CIEaQD3RCIozuSlV6x" +
       "AfpbnCCrAtN7YsgyTxAtjMMbLeqwad2Rdl0J88X1UHFrq6nRBFczGvtSpArY" +
       "jA2ScTnSUYyVXrEBWqym+nf92Y996O/f/GR5PwkbLsyT2gAVfUyyVpQM2L/v" +
       "Y+97yfOe+tI707DqEPu7d6kkSeIkWRzq4t5DXbDV4RMU9gTXJ3i+gRPd9ARE" +
       "mmtN3AwzB2BgfkIdb3r26rgt2fsqsAUbdQSXqSOTfnnnlRFA9d/k+W4I7FBV" +
       "DuW/DcRMSWTKSg7obo862lec5iBxjj2W/QTM918jTOIf3rSBedMpMO87BSb5" +
       "+u5DitsBBeW7kXcC45U7MI7nP8Hx/mvkgMD21g3HW0/hePrZcNyiHXU+6wBW" +
       "PCHZj16jZK8A2zs2kr3jFMk+/Gwkuy2YSh4I7Z05GK9tFfzAjo60m5Q4If9P" +
       "/Avkf/dG/nefIv/PPBv5bwVyYZIzl4IuGEUcin9X6hKkOLyI6/Y6gDwh8Mev" +
       "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" +
       "Ilxqz8ckV6bmZk4ZVTG9E2qFIVvW+mhV");
    public static final java.lang.String jlc$ClassType$jl5$1 =
      ("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" +
       "+Wzkl/UFoiK9fKPn0cshhTvilNWZqFeZ6EvVcAoqMieknuQTlaDUCpFYnvk9" +
       "fVHW6jDaWjR7rSxlkAOesKsLYwhRltURV+1wMvWDXDTL9Ugfq9RLfDmbn5SW" +
       "cc4YjNiJ2QODYcKqqHi3xzcwsTDXQx+hRlkGmtslh5tk3WxIS5UmzWBUjer2" +
       "DNLuZZeDvII3LbPoIgVl0eZRFAy3/VoO8kSo1FvMcbPilIrWZOUGZjtHtimo" +
       "6AeGr1akbDhroZVllzYozV50Zyycc1B97FDGyMrRvaamFOklMpg2OwtuSloD" +
       "ThzmhvIUMLurnsz6ZGzZKjdyJ0NjTCOtVVuOxKzvu4FnI51Ksy81zTq+gBox" +
       "pRLyqD+hyrDZQFumWlXVhtI1F4uhMJQtQvJjaSQhaoEWbXiOeFLFpLqVMItk" +
       "lTgedgjfNsW8LEE5KCbnklAjODu5Zfza1ya3kb90bbe370xvzR89UfUvuCm/" +
       "uNKSzvQvWcr/+s33159YonBsYeXBpStG0rv5mOU6arIu//DYy3at2Vk6oXS0" +
       "5uHUVWAEqAr/6CG8ZHnyS057Oitdmvyhtzz1tMJ9GDlcgMGEmZtC13u1pc5V" +
       "65j8KDjTY6cv6WDTh9O2qzN/6y1/fV/vW6dvuIbHYF56Qs6Tp/xJ9mO/Tb1C" +
       "/nf7mYOjtZqXPTZ3aaHHL12hebOvhpHv9C5Zp/mSo+r8lqT2smD7sU11/tjJ" +
       "FSdbg7nM9PaPTG9jdTtW6/7jjmPfTJK/DzN3gMAQ1Pp2YVSy/2e3xvoP17yK" +
       "+f8cgaa2+21g++gG9KPnCHps3fLPJhn2bjyddu/mJDkAtMEJ2iuuOpm7unKk" +
       "gb3rzqCBh5OdZbB9cqOBTz43Vb33wh3HXpQkdwGPAKr6SkvbxS3r3Wdgve/Q" +
       "rH9xw/qLzxHrgzuOPZwk9wNPnJj1JesVk9wf3ZK+9AykDyQ7EbA9syF95jki" +
       "3fHw0l6yenvvsTXp5Uty37slzZ6B9J5kZ7Kk/DMb0s9cK+m7n1ULfm+K9PgO" +
       "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");
}
